name: CulinaryAPI CI/CD Pipeline

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ] 

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
  
    - name: Build Docker images
      run: |
        docker-compose build

    - name: Start services
      run: |
        docker-compose up -d

    - name: Wait for MySQL to be ready
      run: |
        ./wait-for-it.sh mysql:3306 -- echo "MySQL is up"

    - name: Run migrations
      run: |
        docker-compose run --rm django python manage.py migrate

    - name: Run Tests
      run: |
        docker-compose run --rm django pytest


    - name: Stop and remove services
      if: always()
      run: |
        docker-compose down

    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      MYSQL_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}



  deploy:
    name: deploy to digitalocean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps: 
      - name: deploy to digitalocean
        uses: appleboy/ssh-action@v1.0.3
        with:
           host: ${{ secrets.SSH_HOST}}
           username: ${{ secrets.SSH_USERNAME}}
           key: ${{ secrets.SSH_PRIVATE_KEY}}

           script: |
              cd culinaryapp-api
              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
              echo "MYSQL_DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
              echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
              echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
              docker compose down
              git pull
              docker compose up --detach

